/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nist.main;

import java.io.*;
import java.nio.charset.Charset;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.apache.commons.io.FileUtils;

/**
 * Class responsible for exporting vulnerability data from CVE and CWE records.
 * Generates CSV reports for different security metrics such as impact,
 * presence, exploitability, confidentiality, and integrity across multiple
 * years.
 *
 * @author Carlos
 * @version 1.0
 */
public class VulnerabilityDataExporter {

    /**
     * Start year for processing.
     */
    static Integer anioInicio = 2002;
    /**
     * End year for processing.
     */
    static Integer anioFin = 2025;

    /**
     * Main method that executes the vulnerability data export process. It
     * generates multiple CSV reports for security analysis.
     *
     * @param args Command-line arguments (not used).
     */
    public static void main(String[] args) {
        try {

            // Retrieve CWE list
            List<String> cweList = getCWE();

            // Process CWE impact and presence
            for (String cweElement : cweList) {
                impactFromCwe(cweElement, anioInicio, anioFin, true);
                presenciaFromCwe(cweElement, anioInicio, anioFin, true);
            }
            // Generate summary reports for CWE impact and presence
            totalImpactFromCweList(cweList, anioInicio, anioFin, true);
            totalPresenciaFromCweList(cweList, anioInicio, anioFin, true);
            totalImpactAverageFromCwe(cweList, true);
            totalPresenciaAverageFromCwe(cweList, true);

                      // Generate reports for CVE metrics
            impactFromCve(anioInicio, anioFin, true);
            presenceFromCve(anioInicio, anioFin, true);
            criticalityFromCve(anioInicio, anioFin, true);
            exploitabilityFromCve(anioInicio, anioFin, true);
            accessComplexityFromCve(anioInicio, anioFin, true);
            authenticationFromCve(anioInicio, anioFin, true);
            confidentialityFromCve(anioInicio, anioFin, true);
            integrityFromCve(anioInicio, anioFin, true);
            availabilityFromCve(anioInicio, anioFin, true);

            averageimpactFromCve(anioInicio, anioFin, true);
            averagepresenceFromCve(anioInicio, anioFin, true);
            summaryCriticalityforHealthFromCve(anioInicio, anioFin, true);
            averageExploitabilityFromCve(anioInicio, anioFin, true);

            //finrecorro los CWE
            System.out.println("The following files were successfully exported:\n1. cwe impact per year\n2. cwe presence per year\n3. cve impact per year\n4. cve presence per year\n5. health criticality per year\n6. cve exploitability per year\n7. access complexity per year\n8. authentication level required in cve per year\n9. confidentiality impacts per year\n10. integrity impacts per year according to cve\n11. availability impacts per year according to cve");

        } catch (Exception e) {
            System.out.println("error: " + e);
        }

    }

      /**
     * Retrieves the list of CWE identifiers from a CSV file.
     * 
     * @return A list of CWE identifiers.
     */
    public static List<String> getCWE() {
        List<String> cwe = new ArrayList<>();
        try {

            BufferedReader reader = new BufferedReader(new FileReader("results/Total-cwe.csv"));
            String line = null;
            Integer i = 0;
            while ((line = reader.readLine()) != null) {
                i = i + 1;
                if (i > 1) {// Skip the header row
                    String[] parts = line.split(";");
                    if (parts.length > 3) {
                        cwe.add(parts[0]);
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("error al obtener las CWE del fichero total: " + e);
        }
        return cwe;
    }

        /**
     * Generates a CSV file containing the impact of a specific CWE over multiple years.
     * 
     * @param cwe The CWE identifier.
     * @param anioInicio The start year.
     * @param anioFin The end year.
     * @param removeFileIfExists Whether to remove the file if it exists.
     */
    public static void impactFromCwe(String cwe, Integer anioInicio, Integer anioFin, boolean removeFileIfExists) {
        Integer ai = anioInicio;
        Integer af = anioFin;
        String ficheroCwe;
        String nombreFicheroExcel = "spss/1. impacto cwe por año/" + cwe + "-impacto.csv";
        String valorAnual = "0";
        StringBuilder sb;
        try {
            sb = new StringBuilder();
            sb.append("anio; impacto\n");
            for (int anio = ai; anio < af + 1; anio++) {
                valorAnual = "0";
                ficheroCwe = anio + "-cwe.csv";
                BufferedReader reader = new BufferedReader(new FileReader("results/" + ficheroCwe));
                String line = null;
                Integer i = 0;
                while ((line = reader.readLine()) != null) {
                    i = i + 1;
                    if (i > 1) {
                        String[] parts = line.split(";");
                        if (parts.length > 3) {
                            if (cwe.equals(parts[0])) {
                                valorAnual = parts[5];
                                break;
                            }
                        }
                    }
                }
                sb.append(anio + ";" + valorAnual + "\n");
            }
            String content = sb.toString();
            File file = new File(nombreFicheroExcel);
            if (removeFileIfExists
                    && file.exists()) {
                file.delete();
            }

            file.createNewFile();

            FileUtils.writeStringToFile(file, content, Charset.forName("UTF-8"), true);
        } catch (Exception e) {
            System.out.println("el error en impactFromCwe fue: " + e);
        }

    }

      /**
     * Generates a CSV file containing the total impact of a list of CWEs over multiple years.
     * 
     * @param cweList A list of CWE identifiers.
     * @param anioInicio The start year.
     * @param anioFin The end year.
     * @param removeFileIfExists Whether to remove the file if it exists.
     */
    public static void totalImpactFromCweList(List<String> cweList, Integer anioInicio, Integer anioFin, boolean removeFileIfExists) {
        Integer ai = anioInicio;
        Integer af = anioFin;
        String ficheroCwe;
        String nombreFicheroExcel = "spss/1. impacto cwe por año/totalCWE-impacto.csv";
        String valorAnual = "0";
        StringBuilder sb;
        try {
            sb = new StringBuilder();
            sb.append("cwe; impacto\n");
            Collections.sort(cweList);
            for (String cwe : cweList) {
                for (int anio = ai; anio < af + 1; anio++) {
                    valorAnual = "0";
                    ficheroCwe = anio + "-cwe.csv";
                    BufferedReader reader = new BufferedReader(new FileReader("results/" + ficheroCwe));
                    String line = null;
                    Integer i = 0;
                    while ((line = reader.readLine()) != null) {
                        i = i + 1;
                        if (i > 1) {
                            String[] parts = line.split(";");
                            if (parts.length > 3) {
                                if (cwe.equals(parts[0])) {
                                    valorAnual = parts[5];
                                    break;
                                }
                            }
                        }
                    }
                    sb.append(cwe).append(";").append(valorAnual).append("\n");
                }
            }

            String content = sb.toString();
            File file = new File(nombreFicheroExcel);
            if (removeFileIfExists
                    && file.exists()) {
                file.delete();
            }

            file.createNewFile();

            FileUtils.writeStringToFile(file, content, Charset.forName("UTF-8"), true);
        } catch (Exception e) {
            System.out.println("el error en totalImpactFromCweList fue: " + e);
        }

    }

    
    /**
     * Generates a CSV file containing the total presence of a list of CWEs over multiple years.
     * The presence value is extracted from the corresponding CSV files for each year.
     *
     * @param cweList A list of CWE identifiers.
     * @param anioInicio The start year for the data extraction.
     * @param anioFin The end year for the data extraction.
     * @param removeFileIfExists If true, removes the existing file before creating a new one.
     */
    public static void totalPresenciaFromCweList(List<String> cweList, Integer anioInicio, Integer anioFin, boolean removeFileIfExists) {
        Integer ai = anioInicio;
        Integer af = anioFin;
        String ficheroCwe;
        String nombreFicheroExcel = "spss/2. presencia cwe por año/totalCWE-presencia.csv";
        String valorAnual = "0";
        StringBuilder sb;
        try {
            sb = new StringBuilder();
            sb.append("cwe; presencia\n");
            Collections.sort(cweList);
            for (String cwe : cweList) {
                for (int anio = ai; anio < af + 1; anio++) {
                    valorAnual = "0";
                    ficheroCwe = anio + "-cwe.csv";
                    BufferedReader reader = new BufferedReader(new FileReader("results/" + ficheroCwe));
                    String line = null;
                    Integer i = 0;
                    while ((line = reader.readLine()) != null) {
                        i = i + 1;
                        if (i > 1) { // Skip header row
                            String[] parts = line.split(";");
                            if (parts.length > 3) {
                                if (cwe.equals(parts[0])) {
                                    valorAnual = parts[4]; // Extract presence value
                                    break;
                                }
                            }
                        }
                    }
                    sb.append(cwe).append(";").append(valorAnual).append("\n");
                }
            }

            String content = sb.toString();
            File file = new File(nombreFicheroExcel);
            if (removeFileIfExists && file.exists()) {
                file.delete();
            }
            file.createNewFile();
            FileUtils.writeStringToFile(file, content, Charset.forName("UTF-8"), true);
        } catch (Exception e) {
            System.out.println("El error en totalPresenciaFromCweList fue: " + e);
        }
    }

    /**
     * Generates a CSV file containing the impact of CVEs over multiple years.
     * The impact value is extracted from the corresponding CSV files for each year.
     *
     * @param anioInicio The start year for the data extraction.
     * @param anioFin The end year for the data extraction.
     * @param removeFileIfExists If true, removes the existing file before creating a new one.
     */
    public static void impactFromCve(Integer anioInicio, Integer anioFin, boolean removeFileIfExists) {
        Integer ai = anioInicio;
        Integer af = anioFin;
        String nombreFicheroExcel = "spss/3. impacto cve por año/CVE-impacto.csv";
        StringBuilder sb;
        String ficheroCve;
        try {
            sb = new StringBuilder();
            sb.append("anio; impacto\n");
            for (int anio = ai; anio < af + 1; anio++) {
                ficheroCve = anio + "-cve.csv";
                BufferedReader reader = new BufferedReader(new FileReader("results/" + ficheroCve));
                String line = null;
                Integer i = 0;
                while ((line = reader.readLine()) != null) {
                    i = i + 1;
                    if (i > 1) { // Skip header row
                        String[] parts = line.split(";");
                        if (parts.length > 3) {
                            sb.append(anio).append(";").append(parts[11]).append("\n"); // Extract impact value
                        }
                    }
                }
            }
            String content = sb.toString();
            File file = new File(nombreFicheroExcel);
            if (removeFileIfExists && file.exists()) {
                file.delete();
            }
            file.createNewFile();
            FileUtils.writeStringToFile(file, content, Charset.forName("UTF-8"), true);
        } catch (Exception e) {
            System.out.println("El error en impactFromCve fue: " + e);
        }
    }

    /**
     * Calculates the average impact of CVEs over multiple years and stores it in a CSV file.
     * The method computes the mean impact value for each year.
     *
     * @param anioInicio The start year for the data processing.
     * @param anioFin The end year for the data processing.
     * @param removeFileIfExists If true, removes the existing file before creating a new one.
     */
    public static void averageimpactFromCve(Integer anioInicio, Integer anioFin, boolean removeFileIfExists) {
        DecimalFormat df = new DecimalFormat("#.000");
        Integer ai = anioInicio;
        Integer af = anioFin;
        Double promedio = 0D;
        String nombreFicheroExcel = "spss/3. impacto cve por año/averageCVE-impacto.csv";
        StringBuilder sb;
        try {
            sb = new StringBuilder();
            sb.append("anio; impacto\n");
            for (int anio = ai; anio < af + 1; anio++) {
                promedio = 0D;
                BufferedReader reader = new BufferedReader(new FileReader("spss/3. impacto cve por año/CVE-impacto.csv"));
                String line = null;
                Integer i = 0;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split(";");
                    if (parts.length > 0) {
                        if (parts[0].equals(anio + "")) {
                            i = i + 1;
                            promedio = promedio + Double.parseDouble(parts[1].replace(",", "."));
                        }
                    }
                }
                promedio = promedio / i;
                sb.append(anio).append(";").append(df.format(promedio).replace(".", ",")).append("\n");
            }
            String content = sb.toString();
            File file = new File(nombreFicheroExcel);
            if (removeFileIfExists && file.exists()) {
                file.delete();
            }
            file.createNewFile();
            FileUtils.writeStringToFile(file, content, Charset.forName("UTF-8"), true);
        } catch (Exception e) {
            System.out.println("El error en averageimpactFromCve fue: " + e);
        }
    }

        /**
     * Calculates the average impact of a list of CWE vulnerabilities over multiple years.
     * The method reads impact values from a CSV file, calculates the average for each CWE, and
     * stores the results in a new CSV file.
     *
     * @param cweList A list of CWE identifiers to be analyzed.
     * @param removeFileIfExists If true, removes the existing output file before creating a new one.
     */
    public static void totalImpactAverageFromCwe(List<String> cweList, boolean removeFileIfExists) {
        DecimalFormat df = new DecimalFormat("#.000");
        Double promedio = 0D;
        String nombreFicheroExcel = "spss/1. impacto cwe por año/totalAverageCWE-impacto.csv";
        StringBuilder sb;
        try {
            Collections.sort(cweList);
            sb = new StringBuilder();
            sb.append("cwe; impacto\n");
            for (String cwe : cweList) {
                promedio = 0D;
                BufferedReader reader = new BufferedReader(new FileReader("spss/1. impacto cwe por año/totalCWE-impacto.csv"));
                String line = null;
                Integer i = 0;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split(";");
                    if (parts.length > 0) {
                        if (parts[0].equals(cwe + "")) {
                            i = i + 1;
                            promedio = promedio + Double.parseDouble(parts[1].replace(",", "."));
                        }
                    }
                }
                promedio = promedio / i;
                sb.append(cwe).append(";").append(df.format(promedio).replace(".", ",")).append("\n");
            }
            String content = sb.toString();
            File file = new File(nombreFicheroExcel);
            if (removeFileIfExists && file.exists()) {
                file.delete();
            }
            file.createNewFile();
            FileUtils.writeStringToFile(file, content, Charset.forName("UTF-8"), true);
        } catch (Exception e) {
            System.out.println("El error en totalImpactAverageFromCwe fue: " + e);
        }
    }

    /**
     * Calculates the average presence of a list of CWE vulnerabilities over multiple years.
     * Reads presence data from a CSV file, computes the mean presence per CWE, and writes the results
     * to a new CSV file.
     *
     * @param cweList A list of CWE identifiers to be analyzed.
     * @param removeFileIfExists If true, removes the existing output file before creating a new one.
     */
    public static void totalPresenciaAverageFromCwe(List<String> cweList, boolean removeFileIfExists) {
        DecimalFormat df = new DecimalFormat("#.000");
        Double promedio = 0D;
        String nombreFicheroExcel = "spss/2. presencia cwe por año/totalAverageCWE-presencia.csv";
        StringBuilder sb;
        try {
            Collections.sort(cweList);
            sb = new StringBuilder();
            sb.append("cwe; presencia\n");
            for (String cwe : cweList) {
                promedio = 0D;
                BufferedReader reader = new BufferedReader(new FileReader("spss/2. presencia cwe por año/totalCWE-presencia.csv"));
                String line = null;
                Integer i = 0;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split(";");
                    if (parts.length > 0) {
                        if (parts[0].equals(cwe + "")) {
                            i = i + 1;
                            promedio = promedio + Double.parseDouble(parts[1].replace(",", "."));
                        }
                    }
                }
                promedio = promedio / i;
                sb.append(cwe).append(";").append(df.format(promedio).replace(".", ",")).append("\n");
            }
            String content = sb.toString();
            File file = new File(nombreFicheroExcel);
            if (removeFileIfExists && file.exists()) {
                file.delete();
            }
            file.createNewFile();
            FileUtils.writeStringToFile(file, content, Charset.forName("UTF-8"), true);
        } catch (Exception e) {
            System.out.println("El error en totalPresenciaAverageFromCwe fue: " + e);
        }
    }

    /**
     * Calculates the average presence of CVEs over multiple years.
     * Reads presence values from a CSV file, computes the average per year, and stores the results in a new CSV file.
     *
     * @param anioInicio The start year for the analysis.
     * @param anioFin The end year for the analysis.
     * @param removeFileIfExists If true, removes the existing output file before creating a new one.
     */
    public static void averagepresenceFromCve(Integer anioInicio, Integer anioFin, boolean removeFileIfExists) {
        DecimalFormat df = new DecimalFormat("#.000");
        Integer ai = anioInicio;
        Integer af = anioFin;
        Double promedio = 0D;
        String nombreFicheroExcel = "spss/4. presencia cve por año/averageCVE-presencia.csv";
        StringBuilder sb;
        try {
            sb = new StringBuilder();
            sb.append("anio; presencia\n");
            for (int anio = ai; anio < af + 1; anio++) {
                promedio = 0D;
                BufferedReader reader = new BufferedReader(new FileReader("spss/4. presencia cve por año/CVE-presencia.csv"));
                String line = null;
                Integer i = 0;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split(";");
                    if (parts.length > 0) {
                        if (parts[0].equals(anio + "")) {
                            i = i + 1;
                            promedio = promedio + Double.parseDouble(parts[1].replace(",", "."));
                        }
                    }
                }
                promedio = promedio / i;
                sb.append(anio).append(";").append(df.format(promedio).replace(".", ",")).append("\n");
            }
            String content = sb.toString();
            File file = new File(nombreFicheroExcel);
            if (removeFileIfExists && file.exists()) {
                file.delete();
            }
            file.createNewFile();
            FileUtils.writeStringToFile(file, content, Charset.forName("UTF-8"), true);
        } catch (Exception e) {
            System.out.println("El error en averagepresenceFromCve fue: " + e);
        }
    }


    /**
     * Generates a summary report of critical CVEs related to health over multiple years.
     * The method counts the number of critical vulnerabilities (marked with a value of "1") per year 
     * and writes the results to a CSV file.
     *
     * @param anioInicio The start year for the analysis.
     * @param anioFin The end year for the analysis.
     * @param removeFileIfExists If true, removes the existing output file before creating a new one.
     */
    public static void summaryCriticalityforHealthFromCve(Integer anioInicio, Integer anioFin, boolean removeFileIfExists) {
        DecimalFormat df = new DecimalFormat("#.000");
        Integer ai = anioInicio;
        Integer af = anioFin;
        String nombreFicheroExcel = "spss/5. Criticality cve por año/CVE-SummaryCriticality.csv";
        StringBuilder sb;
        try {
            sb = new StringBuilder();
            sb.append("anio; criticalityNumber\n");
            for (int anio = ai; anio < af + 1; anio++) {
                BufferedReader reader = new BufferedReader(new FileReader("spss/5. Criticality cve por año/CVE-Criticality.csv"));
                String line = null;
                Integer i = 0;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split(";");
                    if (parts.length > 0) {
                        if (parts[0].equals(anio + "") && parts[1].equals("1")) {
                            i = i + 1;
                        }
                    }
                }
                sb.append(anio).append(";").append(df.format(i).replace(".", ",")).append("\n");
            }
            String content = sb.toString();
            File file = new File(nombreFicheroExcel);
            if (removeFileIfExists && file.exists()) {
                file.delete();
            }
            file.createNewFile();
            FileUtils.writeStringToFile(file, content, Charset.forName("UTF-8"), true);
        } catch (Exception e) {
            System.out.println("El error en summaryCriticalityforHealthFromCve fue: " + e);
        }
    }

    /**
     * Computes the average exploitability of CVEs over multiple years.
     * The method reads exploitability values from a CSV file, calculates the average per year, 
     * and writes the results to a new CSV file.
     *
     * @param anioInicio The start year for the analysis.
     * @param anioFin The end year for the analysis.
     * @param removeFileIfExists If true, removes the existing output file before creating a new one.
     */
    public static void averageExploitabilityFromCve(Integer anioInicio, Integer anioFin, boolean removeFileIfExists) {
        DecimalFormat df = new DecimalFormat("#.000");
        Integer ai = anioInicio;
        Integer af = anioFin;
        Double promedio = 0D;
        String nombreFicheroExcel = "spss/6. Exploitability cve por año/CVE-AverageExploitability.csv";
        StringBuilder sb;
        try {
            sb = new StringBuilder();
            sb.append("anio; exploitability\n");
            for (int anio = ai; anio < af + 1; anio++) {
                promedio = 0D;
                BufferedReader reader = new BufferedReader(new FileReader("spss/6. Exploitability cve por año/CVE-Exploitability.csv"));
                String line = null;
                Integer i = 0;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split(";");
                    if (parts.length > 0) {
                        if (parts[0].equals(anio + "")) {
                            i = i + 1;
                            promedio = promedio + Double.parseDouble(parts[1].replace(",", "."));
                        }
                    }
                }
                promedio = promedio / i;
                sb.append(anio).append(";").append(df.format(promedio).replace(".", ",")).append("\n");
            }
            String content = sb.toString();
            File file = new File(nombreFicheroExcel);
            if (removeFileIfExists && file.exists()) {
                file.delete();
            }
            file.createNewFile();
            FileUtils.writeStringToFile(file, content, Charset.forName("UTF-8"), true);
        } catch (Exception e) {
            System.out.println("El error en averageExploitabilityFromCve fue: " + e);
        }
    }

    /**
     * Generates a CSV file containing the presence of CVEs over multiple years.
     * The method reads presence values from input CSV files, extracts relevant data, and writes it 
     * to an output CSV file.
     *
     * @param anioInicio The start year for the analysis.
     * @param anioFin The end year for the analysis.
     * @param removeFileIfExists If true, removes the existing output file before creating a new one.
     */
    public static void presenceFromCve(Integer anioInicio, Integer anioFin, boolean removeFileIfExists) {
        Integer ai = anioInicio;
        Integer af = anioFin;
        String nombreFicheroExcel = "spss/4. presencia cve por año/CVE-presencia.csv";
        StringBuilder sb;
        String ficheroCve;
        try {
            sb = new StringBuilder();
            sb.append("anio; presencia\n");
            for (int anio = ai; anio < af + 1; anio++) {
                ficheroCve = anio + "-cve.csv";
                BufferedReader reader = new BufferedReader(new FileReader("results/" + ficheroCve));
                String line = null;
                Integer i = 0;
                while ((line = reader.readLine()) != null) {
                    i = i + 1;
                    if (i > 1) {
                        String[] parts = line.split(";");
                        if (parts.length > 3) {
                            sb.append(anio).append(";").append(parts[10]).append("\n");
                        }
                    }
                }
            }
            String content = sb.toString();
            File file = new File(nombreFicheroExcel);
            if (removeFileIfExists && file.exists()) {
                file.delete();
            }
            file.createNewFile();
            FileUtils.writeStringToFile(file, content, Charset.forName("UTF-8"), true);
        } catch (Exception e) {
            System.out.println("El error en presenceFromCve fue: " + e);
        }
    }

    /**
     * Extracts and records the criticality levels of CVEs over multiple years.
     * Reads criticality values from input CSV files, extracts data, and writes the results to an output CSV file.
     *
     * @param anioInicio The start year for the analysis.
     * @param anioFin The end year for the analysis.
     * @param removeFileIfExists If true, removes the existing output file before creating a new one.
     */
    public static void criticalityFromCve(Integer anioInicio, Integer anioFin, boolean removeFileIfExists) {
        Integer ai = anioInicio;
        Integer af = anioFin;
        String nombreFicheroExcel = "spss/5. Criticality cve por año/CVE-Criticality.csv";
        StringBuilder sb;
        String ficheroCve;
        try {
            sb = new StringBuilder();
            sb.append("anio; criticality\n");
            for (int anio = ai; anio < af + 1; anio++) {
                ficheroCve = anio + "-cve.csv";
                BufferedReader reader = new BufferedReader(new FileReader("results/" + ficheroCve));
                String line = null;
                Integer i = 0;
                while ((line = reader.readLine()) != null) {
                    i = i + 1;
                    if (i > 1) {
                        String[] parts = line.split(";");
                        if (parts.length > 3) {
                            sb.append(anio).append(";").append(parts[12]).append("\n");
                        }
                    }
                }
            }
            String content = sb.toString();
            File file = new File(nombreFicheroExcel);
            if (removeFileIfExists && file.exists()) {
                file.delete();
            }
            file.createNewFile();
            FileUtils.writeStringToFile(file, content, Charset.forName("UTF-8"), true);
        } catch (Exception e) {
            System.out.println("El error en criticalityFromCve fue: " + e);
        }
    }


    /**
     * Generates a CSV file containing the exploitability scores of CVEs over multiple years.
     * The method reads exploitability values from input CSV files, extracts relevant data, 
     * and writes it to an output CSV file.
     *
     * @param anioInicio The start year for the analysis.
     * @param anioFin The end year for the analysis.
     * @param removeFileIfExists If true, removes the existing output file before creating a new one.
     */
    public static void exploitabilityFromCve(Integer anioInicio, Integer anioFin, boolean removeFileIfExists) {
        Integer ai = anioInicio;
        Integer af = anioFin;
        String nombreFicheroExcel = "spss/6. Exploitability cve por año/CVE-Exploitability.csv";
        StringBuilder sb;
        String ficheroCve;
        try {
            sb = new StringBuilder();
            sb.append("anio; exploitability\n");
            for (int anio = ai; anio < af + 1; anio++) {
                ficheroCve = anio + "-cve.csv";
                BufferedReader reader = new BufferedReader(new FileReader("results/" + ficheroCve));
                String line = null;
                Integer i = 0;
                while ((line = reader.readLine()) != null) {
                    i = i + 1;
                    if (i > 1) {
                        String[] parts = line.split(";");
                        if (parts.length > 3) {
                            sb.append(anio).append(";").append(parts[7]).append("\n");
                        }
                    }
                }
            }
            String content = sb.toString();
            File file = new File(nombreFicheroExcel);
            if (removeFileIfExists && file.exists()) {
                file.delete();
            }
            file.createNewFile();
            FileUtils.writeStringToFile(file, content, Charset.forName("UTF-8"), true);
        } catch (Exception e) {
            System.out.println("El error en exploitabilityFromCve fue: " + e);
        }
    }

    /**
     * Generates a CSV file containing the access complexity levels of CVEs over multiple years.
     * This method reads data from input CSV files, extracts access complexity values, and writes the results 
     * to an output CSV file.
     *
     * @param anioInicio The start year for the analysis.
     * @param anioFin The end year for the analysis.
     * @param removeFileIfExists If true, removes the existing output file before creating a new one.
     */
    public static void accessComplexityFromCve(Integer anioInicio, Integer anioFin, boolean removeFileIfExists) {
        Integer ai = anioInicio;
        Integer af = anioFin;
        String nombreFicheroExcel = "spss/7. Access Complexity cve por año/CVE-Access Complexity.csv";
        StringBuilder sb;
        String ficheroCve;
        try {
            sb = new StringBuilder();
            sb.append("anio; accessComplexity\n");
            for (int anio = ai; anio < af + 1; anio++) {
                ficheroCve = anio + "-cve.csv";
                BufferedReader reader = new BufferedReader(new FileReader("results/" + ficheroCve));
                String line = null;
                Integer i = 0;
                while ((line = reader.readLine()) != null) {
                    i = i + 1;
                    if (i > 1) {
                        String[] parts = line.split(";");
                        if (parts.length > 3) {
                            sb.append(anio).append(";").append(parts[2]).append("\n");
                        }
                    }
                }
            }
            String content = sb.toString();
            File file = new File(nombreFicheroExcel);
            if (removeFileIfExists && file.exists()) {
                file.delete();
            }
            file.createNewFile();
            FileUtils.writeStringToFile(file, content, Charset.forName("UTF-8"), true);
        } catch (Exception e) {
            System.out.println("El error en accessComplexityFromCve fue: " + e);
        }
    }

    /**
     * Generates a CSV file containing authentication levels required for CVEs over multiple years.
     * This method reads data from input CSV files, extracts authentication values, and writes the results 
     * to an output CSV file.
     *
     * @param anioInicio The start year for the analysis.
     * @param anioFin The end year for the analysis.
     * @param removeFileIfExists If true, removes the existing output file before creating a new one.
     */
    public static void authenticationFromCve(Integer anioInicio, Integer anioFin, boolean removeFileIfExists) {
        Integer ai = anioInicio;
        Integer af = anioFin;
        String nombreFicheroExcel = "spss/8. Authentication cve por año/CVE-Authentication.csv";
        StringBuilder sb;
        String ficheroCve;
        try {
            sb = new StringBuilder();
            sb.append("anio; authentication\n");
            for (int anio = ai; anio < af + 1; anio++) {
                ficheroCve = anio + "-cve.csv";
                BufferedReader reader = new BufferedReader(new FileReader("results/" + ficheroCve));
                String line = null;
                Integer i = 0;
                while ((line = reader.readLine()) != null) {
                    i = i + 1;
                    if (i > 1) {
                        String[] parts = line.split(";");
                        if (parts.length > 3) {
                            sb.append(anio).append(";").append(parts[3]).append("\n");
                        }
                    }
                }
            }
            String content = sb.toString();
            File file = new File(nombreFicheroExcel);
            if (removeFileIfExists && file.exists()) {
                file.delete();
            }
            file.createNewFile();
            FileUtils.writeStringToFile(file, content, Charset.forName("UTF-8"), true);
        } catch (Exception e) {
            System.out.println("El error en authenticationFromCve fue: " + e);
        }
    }

    /**
     * Generates a CSV file containing confidentiality impact scores from CVEs over multiple years.
     * The method reads confidentiality impact values from input CSV files, extracts relevant data, 
     * and writes it to an output CSV file.
     *
     * @param anioInicio The start year for the analysis.
     * @param anioFin The end year for the analysis.
     * @param removeFileIfExists If true, removes the existing output file before creating a new one.
     */
    public static void confidentialityFromCve(Integer anioInicio, Integer anioFin, boolean removeFileIfExists) {
        Integer ai = anioInicio;
        Integer af = anioFin;
        String nombreFicheroExcel = "spss/9. Confidentiality cve por año/CVE-Confidentiality.csv";
        StringBuilder sb;
        String ficheroCve;
        try {
            sb = new StringBuilder();
            sb.append("anio; confidentiality\n");
            for (int anio = ai; anio < af + 1; anio++) {
                ficheroCve = anio + "-cve.csv";
                BufferedReader reader = new BufferedReader(new FileReader("results/" + ficheroCve));
                String line = null;
                Integer i = 0;
                while ((line = reader.readLine()) != null) {
                    i = i + 1;
                    if (i > 1) {
                        String[] parts = line.split(";");
                        if (parts.length > 3) {
                            sb.append(anio).append(";").append(parts[4]).append("\n");
                        }
                    }
                }
            }
            String content = sb.toString();
            File file = new File(nombreFicheroExcel);
            if (removeFileIfExists && file.exists()) {
                file.delete();
            }
            file.createNewFile();
            FileUtils.writeStringToFile(file, content, Charset.forName("UTF-8"), true);
        } catch (Exception e) {
            System.out.println("El error en confidentialityFromCve fue: " + e);
        }
    }

    /**
     * Generates a CSV file containing integrity impact scores from CVEs over multiple years.
     * This method reads integrity impact values from input CSV files, extracts relevant data,
     * and writes it to an output CSV file.
     *
     * @param anioInicio The start year for the analysis.
     * @param anioFin The end year for the analysis.
     * @param removeFileIfExists If true, removes the existing output file before creating a new one.
     */
    public static void integrityFromCve(Integer anioInicio, Integer anioFin, boolean removeFileIfExists) {
        Integer ai = anioInicio;
        Integer af = anioFin;
        String nombreFicheroExcel = "spss/10. Integrity cve por año/CVE-Integrity.csv";
        StringBuilder sb;
        String ficheroCve;
        try {
            sb = new StringBuilder();
            sb.append("anio; integrity\n");
            for (int anio = ai; anio < af + 1; anio++) {
                ficheroCve = anio + "-cve.csv";
                BufferedReader reader = new BufferedReader(new FileReader("results/" + ficheroCve));
                String line = null;
                Integer i = 0;
                while ((line = reader.readLine()) != null) {
                    i = i + 1;
                    if (i > 1) {
                        String[] parts = line.split(";");
                        if (parts.length > 3) {
                            sb.append(anio).append(";").append(parts[5]).append("\n");
                        }
                    }
                }
            }
            String content = sb.toString();
            File file = new File(nombreFicheroExcel);
            if (removeFileIfExists && file.exists()) {
                file.delete();
            }
            file.createNewFile();
            FileUtils.writeStringToFile(file, content, Charset.forName("UTF-8"), true);
        } catch (Exception e) {
            System.out.println("El error en integrityFromCve fue: " + e);
        }
    }

    /**
     * Generates a CSV file containing availability impact scores from CVEs over multiple years.
     * This method reads availability impact values from input CSV files, extracts relevant data,
     * and writes it to an output CSV file.
     *
     * @param anioInicio The start year for the analysis.
     * @param anioFin The end year for the analysis.
     * @param removeFileIfExists If true, removes the existing output file before creating a new one.
     */
    public static void availabilityFromCve(Integer anioInicio, Integer anioFin, boolean removeFileIfExists) {
        Integer ai = anioInicio;
        Integer af = anioFin;
        String nombreFicheroExcel = "spss/11. Availability cve por año/CVE-availability.csv";
        StringBuilder sb;
        String ficheroCve;
        try {
            sb = new StringBuilder();
            sb.append("anio; availability\n");
            for (int anio = ai; anio < af + 1; anio++) {
                ficheroCve = anio + "-cve.csv";
                BufferedReader reader = new BufferedReader(new FileReader("results/" + ficheroCve));
                String line = null;
                Integer i = 0;
                while ((line = reader.readLine()) != null) {
                    i = i + 1;
                    if (i > 1) {
                        String[] parts = line.split(";");
                        if (parts.length > 3) {
                            sb.append(anio).append(";").append(parts[6]).append("\n");
                        }
                    }
                }
            }
            String content = sb.toString();
            File file = new File(nombreFicheroExcel);
            if (removeFileIfExists && file.exists()) {
                file.delete();
            }
            file.createNewFile();
            FileUtils.writeStringToFile(file, content, Charset.forName("UTF-8"), true);
        } catch (Exception e) {
            System.out.println("El error en availabilityFromCve fue: " + e);
        }
    }

    /**
     * Generates a CSV file containing the presence data of a specific CWE over multiple years.
     * This method reads presence values from input CSV files, extracts relevant data,
     * and writes it to an output CSV file.
     *
     * @param cwe The CWE identifier.
     * @param anioInicio The start year for the analysis.
     * @param anioFin The end year for the analysis.
     * @param removeFileIfExists If true, removes the existing output file before creating a new one.
     */
    public static void presenciaFromCwe(String cwe, Integer anioInicio, Integer anioFin, boolean removeFileIfExists) {
        Integer ai = anioInicio;
        Integer af = anioFin;
        String ficheroCwe;
        String nombreFicheroExcel = "spss/2. presencia cwe por año/" + cwe + "-presencia.csv";
        String valorAnual = "0";
        StringBuilder sb;
        try {
            sb = new StringBuilder();
            sb.append("anio; presencia\n");
            for (int anio = ai; anio < af + 1; anio++) {
                valorAnual = "0";
                ficheroCwe = anio + "-cwe.csv";
                BufferedReader reader = new BufferedReader(new FileReader("results/" + ficheroCwe));
                String line = null;
                Integer i = 0;
                while ((line = reader.readLine()) != null) {
                    i = i + 1;
                    if (i > 1) {
                        String[] parts = line.split(";");
                        if (parts.length > 3) {
                            if (cwe.equals(parts[0])) {
                                valorAnual = parts[4];
                                break;
                            }
                        }
                    }
                }
                sb.append(anio).append(";").append(valorAnual).append("\n");
            }
            String content = sb.toString();
            File file = new File(nombreFicheroExcel);
            if (removeFileIfExists && file.exists()) {
                file.delete();
            }
            file.createNewFile();
            FileUtils.writeStringToFile(file, content, Charset.forName("UTF-8"), true);
        } catch (Exception e) {
            System.out.println("El error en presenciaFromCwe fue: " + e);
        }
    }


}
